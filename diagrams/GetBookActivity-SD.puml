@startuml
title GetBook

actor User
participant "API Gateway" as APIGateway
participant Lambda
participant GetBookActivity
participant ModelConverter
participant CatalogDao
database DynamoDB

User -> APIGateway: GET /book/{bookId}
activate User
activate APIGateway
APIGateway -> Lambda
activate Lambda
Lambda -> GetBookActivity: handleRequest(GetBookRequest, Context)
activate GetBookActivity
GetBookActivity -> CatalogDao: getBook(BookId)
activate CatalogDao
CatalogDao -> DynamoDB: load book by Id for that bookId
activate DynamoDB

alt if bookId does not exist
    CatalogDao <-- DynamoDB: null
    Lambda <-- CatalogDao: BookNotFoundException
    APIGateway <-- Lambda
    User <-- APIGateway: 404 Response
    else otherwise, continue
    end

CatalogDao <-- DynamoDB: Book
deactivate DynamoDB
GetBookActivity <-- CatalogDao
deactivate CatalogDao
GetBookActivity -> ModelConverter: toBookModel(Book)
activate ModelConverter
GetBookActivity <-- ModelConverter: BookModel
deactivate ModelConverter
GetBookActivity -> Lambda: GetBookResponse
deactivate GetBookActivity

APIGateway <-- Lambda
deactivate Lambda
User <-- APIGateway: 200 Response
deactivate APIGateway
deactivate User
@enduml